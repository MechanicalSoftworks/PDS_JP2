#	Kakadu JPEG2000 Software
#
#	Makefile.conf is included by all Makefiles.
#	gmake syntax
#
#	PIRL CVS ID: Makefile.conf,v 1.5 2012/08/24 01:36:00 castalia Exp

PROJECT			:=	Kakadu JPEG2000 Software

ifeq ($(strip $(PROJECT_ROOT)),)
$(error The PROJECT_ROOT must be defined)
endif


#	Define the following token to any value to avoid building the Java API.
#NO_JAVA :=	NO_JAVA

#	Define the following token to any value to avoid installing the docs.
#NO_DOCS :=	NO_DOCS

#-------------------------------------------------------------------------------
#	Host system and architecture identification.

empty :=
space := $(empty) $(empty)
HOSTNAME		:=	$(shell hostname)
OS				:=	$(subst $(space),_,$(shell uname -s))
ARCH			:=	$(subst $(space),_,$(shell uname -m))

#-------------------------------------------------------------------------------
#	Software version.

VERSION			:=	$(shell grep '^[0-9]' $(PROJECT_ROOT)/VERSION)
ifeq ($(strip $(VERSION)),)
$(warning ---------------)
$(warning No VERSION file)
$(warning ---------------)
VERSION			:=	0.0
endif
empty :=
space := $(empty) $(empty)
MAJOR_VERSION	:=	$(firstword $(subst .,$(space),$(VERSION)))

KAKADU_VERSION	:=	$(subst _,,$(shell grep '^_' $(PROJECT_ROOT)/VERSION))
ifeq ($(strip $(KAKADU_VERSION)),)
KAKADU_VERSION	:=	00R
endif

#-------------------------------------------------------------------------------
#	Host OS and architecture specific build specifications.

ifdef FAT_MAC_ARCH
#	Include Darwin FAT_MAC_ARCH build options.
include					$(PROJECT_ROOT)/Build/Make-Darwin-fat-$(FAT_MAC_ARCH)

ifeq (ppc,$(FAT_MAC_ARCH))
_ARCH_ = Power_Macintosh
else
_ARCH_ = $(FAT_MAC_ARCH)
endif

$(PROJECT_ROOT)/Build/Make-Darwin-fat-$(FAT_MAC_ARCH): $(PROJECT_ROOT)/Build/Make-Darwin-$(_ARCH_)
	@echo
	@echo "Using Make-Darwin-$(_ARCH_) for $(PROJECT_ROOT)/Build/Make-Darwin-fat-$(FAT_MAC_ARCH)"
	ln -s Make-Darwin-$(_ARCH_) $(PROJECT_ROOT)/Build/Make-Darwin-fat-$(FAT_MAC_ARCH)
	@echo
$(PROJECT_ROOT)/Build/Make-Darwin-$(_ARCH_):
	@echo "Using Make-generic for $(PROJECT_ROOT)/Build/Make-Darwin-$(_ARCH_)"
	ln -s Make-generic $(PROJECT_ROOT)/Build/Make-Darwin-$(_ARCH_)

else
#	Include the host-specific build options.
include					$(PROJECT_ROOT)/Build/Make-$(OS)-$(ARCH)
$(PROJECT_ROOT)/Build/Make-$(OS)-$(ARCH):
	@echo
	@echo "Using Make-generic for $(PROJECT_ROOT)/Build/Make-$(OS)-$(ARCH)"
	ln -s Make-generic $(PROJECT_ROOT)/Build/Make-$(OS)-$(ARCH)
	@echo
endif

#-------------------------------------------------------------------------------
#	Installation location

#	Root directory.
ifeq ($(strip $(INSTALL_DIR)),)
#	In case token was set to empty.
override INSTALL_DIR	:=	$(PROJECT_ROOT)
else
$(warning ===========)
$(warning INSTALL_DIR set to $(INSTALL_DIR))
$(warning ===========)
endif

#		Header include files.
ifeq ($(strip $(INCLUDE_DIR)),)
override INCLUDE_DIR	:=	$(INSTALL_DIR)/include
else
$(warning ===========)
$(warning INCLUDE_DIR set to $(INCLUDE_DIR))
$(warning ===========)
endif

#		Library files.
ifeq ($(strip $(LIB_DIR)),)
#			Default.
ifneq ($(INSTALL_DIR),$(PROJECT_ROOT))
#				User specified installation outside PROJECT_ROOT.
override LIB_DIR		:=	$(INSTALL_DIR)/lib
else
ifneq ($(strip $(OS)),Darwin)
#				OS-ARCH specific installation inside PROJECT_ROOT.
override LIB_DIR		:=	$(INSTALL_DIR)/lib/$(OS)-$(ARCH)
else
ifdef FAT_MAC
#				Apple Mac (Darwin) FAT_MAC installation inside PROJECT_ROOT.
override LIB_DIR		:=	$(INSTALL_DIR)/lib/$(OS)-fat
else
override LIB_DIR		:=	$(INSTALL_DIR)/lib/$(OS)-$(ARCH)
endif	#	FAT_MAC
endif	#	Darwin
endif	#	PROJECT_ROOT
else
$(warning =======)
$(warning LIB_DIR set to $(LIB_DIR))
$(warning =======)
endif

#		Binary executable files.
ifeq ($(strip $(BIN_DIR)),)
#			Default.
ifneq ($(INSTALL_DIR),$(PROJECT_ROOT))
#				User specified installation outside PROJECT_ROOT.
override BIN_DIR		:=	$(INSTALL_DIR)/bin
else
ifneq ($(strip $(OS)),Darwin)
#				OS-ARCH specific installation inside PROJECT_ROOT.
override BIN_DIR		:=	$(INSTALL_DIR)/bin/$(OS)-$(ARCH)
else
ifdef FAT_MAC
#				Apple Mac (Darwin) FAT_MAC installation inside PROJECT_ROOT.
override BIN_DIR		:=	$(INSTALL_DIR)/bin/$(OS)-fat
else
override BIN_DIR		:=	$(INSTALL_DIR)/bin/$(OS)-$(ARCH)
endif	#	FAT_MAC
endif	#	Darwin
endif	#	PROJECT_ROOT
else
$(warning =======)
$(warning BIN_DIR set to $(BIN_DIR))
$(warning =======)
endif

#		Documentation files.
#		Header include files.
ifeq ($(strip $(DOCS_DIR)),)
override DOCS_DIR		:=	$(INSTALL_DIR)/docs
else
$(warning ========)
$(warning DOCS_DIR set to $(DOCS_DIR))
$(warning ========)
endif

#-------------------------------------------------------------------------------
#	Apple Mac (Darwin) fat (universal) builds.

ifeq ($(strip $(OS)),Darwin)
ifdef FAT_MAC_ARCH
#	Recursive FAT_MAC_ARCH build.
CXXFLAGS		+=	-arch $(FAT_MAC_ARCH)
LDFLAGS			+=	-arch $(FAT_MAC_ARCH)
else
#	Set FAT_MAC_ARCH or FAT_MAC_ARCHES, but not both.
ifdef FAT_MAC
FAT_MAC_ARCHES	:=	$(subst -arch,,$(FAT_MAC))
endif	#	FAT_MAC
endif	#	FAT_MAC_ARCH
endif	#	Darwin

#-------------------------------------------------------------------------------
#	Common build specifications.

STATIC_LIBRARY_EXTENSION	?=	a
SHARED_LIBRARY_EXTENSION	?=	so

STATIC_LIBRARY			:=	lib$(LIBRARY_NAME)$(LIBRARY_NAME_SUFFIX).$(STATIC_LIBRARY_EXTENSION)
SHARED_LIBRARY			:=	$(STATIC_LIBRARY:%.a=%.$(SHARED_LIBRARY_EXTENSION))
ifdef FAT_MAC_ARCHES
ARCH_STATIC_LIBRARIES	:=	$(FAT_MAC_ARCHES:%=%/$(STATIC_LIBRARY))
ARCH_SHARED_LIBRARIES	:=	$(FAT_MAC_ARCHES:%=%/$(SHARED_LIBRARY))
ARCH_PROGRAMS			:=	$(foreach arch,$(FAT_MAC_ARCHES),$(PROGRAMS:%=$(arch)/%))
endif

#	Type (STATIC or SHARED)	of library linkage.
STATIC_LIBRARY_OPTION		?=	-static -static-libgcc
SHARED_LIBRARY_OPTION		?=	-shared
SHARED_LIBRARY_CXXFLAGS		?=	-fPIC

#-------------------------------------------------------------------------------
#	Common targets and build rules.

.BEGIN:
	@echo
	@echo "*** $(TITLE) version $(VERSION)"
	@echo "    On $(OS)-$(ARCH) host system $(HOSTNAME)"
    ifdef FAT_MAC_ARCHES
	@echo "    For architectures: $(FAT_MAC_ARCHES)"
    endif
	@date
.BEGIN_INSTALL:
	@echo
	@echo "=== $(TITLE) installation"
	@echo
.BEGIN_STATIC:
	@echo
	@echo "=== $(TITLE) static object library: $(STATIC_LIBRARY)"
	@echo
.NO_STATIC_LIBRARY:
	@echo
	@echo "*** STATIC library build has not been enabled in $(PROJECT_ROOT)/Build/Make-$(OS)-$(ARCH)"
	@echo
.BEGIN_SHARED:
	@echo
	@echo "=== $(TITLE) shared/dynamic library: $(SHARED_LIBRARY)"
	@echo
.NO_SHARED_LIBRARY:
	@echo
	@echo "*** SHARED library build has not been enabled in $(PROJECT_ROOT)/Build/Make-$(OS)-$(ARCH)"
	@echo
.END:
	@echo
	@echo "*** $(TITLE) version $(VERSION) Completed"
	@date
	@echo


.PHONY:	.BEGIN \
		all programs libraries docs \
		.BEGIN_STATIC static_library .NO_STATIC_LIBRARY \
		.BEGIN_SHARED shared_library .NO_SHARED_LIBRARY \
		.BEGIN_INSTALL install bin_install headers_install docs_install \
		static_library_install shared_library_install \
		clean \
		.END

#	Command sequence to build a FAT_MAC target from FAT_MAC_ARCHES versions.
define BUILD_FAT_MAC
	@echo
	@echo "--- universal $@"
	@echo
	rm -f $@
	lipo $(filter %/$@,$^) -create -output $@
	@echo
endef

#	Command sequence to build a target in FAT_MAC_ARCHES subdirectories.
define BUILD_FAT_MAC_ARCHES
	@echo
	@echo "+++ $@"
	@echo
	@mkdir -p $(subst /,,$(dir $@))
	@$(MAKE) --no-print-directory -C $(subst /,,$(dir $@)) -f ../Makefile \
		FAT_MAC_ARCH=$(subst /,,$(dir $@)) $(notdir $@)
endef

#	Command sequence to build a static library from its objects.
define BUILD_STATIC_LIBRARY
	rm -f $@
	ar qs $@ $^
	@echo
endef

#	Shared library object pattern rule.
%.slo: %.cpp
	$(CC) $(CPPFLAGS) $(CXXFLAGS) -c $< -o $@
%.slo: %.cc
	$(CC) $(CPPFLAGS) $(CXXFLAGS) -c $< -o $@
%.slo: %.c
	$(CC) $(CPPFLAGS) $(CXXFLAGS) -c $< -o $@
