#	Kakadu Auxiliary Libraries
#
#	PROJECT_ROOT/managed/Build/Makefile
#	gmake syntax
#
#	Author:	Bradford Castalia, UA/PIRL
#
#   PIRL CVS ID: Makefile,v 1.8 2011/07/08 04:10:42 castalia Exp

TITLE					:=	Kakadu JPEG2000 Auxiliary Libraries

#	Library name.
LIBRARY_NAME			:=	kdu_a
JNI_LIBRARY_NAME		:=	kdu_jni


#	Default build target (must preceed targets in include file).
all:				.BEGIN \
					libraries \
					jni_library \
					.END


#	Kakadu source base directory.
ifdef FAT_MAC_ARCH
PROJECT_ROOT			:=	../../..
else
PROJECT_ROOT			:=	../..
endif


#	Makefile configuration.
include					$(PROJECT_ROOT)/Build/Makefile.conf


#	Kakadu-specific library names, for name compatibility.
KAKADU_SHARED_LIBRARY_NAME	:=	lib$(LIBRARY_NAME)$(KAKADU_VERSION).$(SHARED_LIBRARY_EXTENSION)
KAKADU_STATIC_LIBRARY_NAME	:=	libkdu_aux.a


#	Where the source code files can be found.
VPATH					:=	$(PROJECT_ROOT)/managed/kdu_aux \
							$(PROJECT_ROOT)/apps/args \
							$(PROJECT_ROOT)/apps/jp2 \
							$(PROJECT_ROOT)/apps/image \
							$(PROJECT_ROOT)/apps/support \
							$(PROJECT_ROOT)/apps/caching_sources \
							$(PROJECT_ROOT)/apps/client_server \
							$(PROJECT_ROOT)/apps/kdu_client \
							$(PROJECT_ROOT)/apps/kdu_server \
							$(PROJECT_ROOT)/apps/kdu_hyperdoc


#	Library contents.

JP2_OBJS				:=	jp2.o \
							jpx.o \
							mj2.o

IMAGE_OBJS				:=	image_in.o \
							image_out.o \
							palette.o \
							kdu_tiff.o \

SUPPORT_OBJS			:=	kdu_region_compositor.o \
							kdu_region_decompressor.o \
							kdu_stripe_compressor.o \
							kdu_stripe_decompressor.o

CACHE_OBJS				:=	kdu_cache.o

CLIENT_SERVER_OBJS		:=	kdu_client_window.o \
							kdcs_comms.o \
							kdu_security.o

CLIENT_OBJS				:=	kdu_client.o \
							kdu_clientx.o

SERVER_OBJS				:=	kdu_serve.o \
							kdu_servex.o

LIBRARY_OBJECTS			:=	args.o \
							kdu_aux.o \
							$(JP2_OBJS) \
							$(IMAGE_OBJS) \
							$(SUPPORT_OBJS) \
							$(CACHE_OBJS) \
							$(CLIENT_SERVER_OBJS) \
							$(CLIENT_OBJS) \
							$(SERVER_OBJS)

#	Special case: This file, generated by kdu_hyperdoc is not seen in the VPATH.
JNI_SOURCE				:=	../$(JNI_LIBRARY_NAME)/kdu_jni.cpp

SHARED_LIBRARY_OBJECTS	:=	$(LIBRARY_OBJECTS:%.o=%.slo)


#	Compiler/Linker options:

INCLUDES				:=	-I$(PROJECT_ROOT)/coresys/common \
							-I$(PROJECT_ROOT)/managed/all_includes \
							-I$(PROJECT_ROOT)/apps/args \
							-I$(PROJECT_ROOT)/apps/client_server \
							$(HOST_INCLUDES)

CXXFLAGS				+=	$(HOST_CXXFLAGS) $(INCLUDES)
$(SHARED_LIBRARY):	CXXFLAGS	+=	$(SHARED_LIBRARY_CXXFLAGS)


LDFLAGS					+=	$(HOST_LDFLAGS)
$(SHARED_LIBRARY):	LDFLAGS		+=	$(SHARED_LIBRARY_OPTION)

#	Kakadu coresys library.
KDU_LIBRARY				:=	-L$(PROJECT_ROOT)/coresys/Build \
							-lkdu$(LIBRARY_NAME_SUFFIX)

LIBRARIES				:=	$(KDU_LIBRARY) \
							$(HOST_LIBRARIES) \
							-lm
ifndef KDU_NO_THREADS
LIBRARIES				+=	-lpthread
endif


#	Java JNI library.
JNI_LIBRARY		:=	lib$(JNI_LIBRARY_NAME)$(LIBRARY_NAME_SUFFIX).$(SHARED_LIBRARY_EXTENSION)

ifdef FAT_MAC_ARCHES
#	Apple Mac fat (universal) library architectures.
JNI_ARCH_SHARED_LIBRARIES :=	$(FAT_MAC_ARCHES:%=%/$(JNI_LIBRARY))
endif

$(JNI_LIBRARY):		CXXFLAGS	+=	$(SHARED_LIBRARY_CXXFLAGS)
#	Prevents strict-aliasing rules warnings.
$(JNI_LIBRARY):		CXXFLAGS	+=	-fno-strict-aliasing
$(JNI_LIBRARY):		LDFLAGS		+=	$(SHARED_LIBRARY_OPTION)


#	Targets:

libraries:			static_library \
					shared_library

#	Because of the unfortunate dependence on kdu_hyperdoc to generate
#	JNI source code files, the kdu_aux.{h,cpp} files, and collect together
#	all of the header files that are required, the docs target is a
#	prerequiste of the library targets.

#	Static library.
ifdef STATIC
static_library:		.BEGIN_STATIC docs $(STATIC_LIBRARY)

ifdef FAT_MAC_ARCHES
$(STATIC_LIBRARY):	$(ARCH_STATIC_LIBRARIES)
	$(BUILD_FAT_MAC)
$(ARCH_STATIC_LIBRARIES):
	$(BUILD_FAT_MAC_ARCHES)
else
$(STATIC_LIBRARY):		$(LIBRARY_OBJECTS)
	$(BUILD_STATIC_LIBRARY)
endif	#	FAT_MAC_ARCHES

static_library_install:	$(STATIC_LIBRARY)
	@echo
	@echo "Installing the static object library: $(STATIC_LIBRARY)"
	mkdir -p $(LIB_DIR)
	cp -f $(STATIC_LIBRARY) $(LIB_DIR)/$(STATIC_LIBRARY).$(VERSION)
	ranlib $(LIB_DIR)/$(STATIC_LIBRARY).$(VERSION)
	rm -f $(LIB_DIR)/$(STATIC_LIBRARY)
	rm -f $(LIB_DIR)/$(KAKADU_STATIC_LIBRARY_NAME)
	ln -s $(STATIC_LIBRARY).$(VERSION) $(LIB_DIR)/$(STATIC_LIBRARY)
	ln -s $(STATIC_LIBRARY).$(VERSION) $(LIB_DIR)/$(KAKADU_STATIC_LIBRARY_NAME)
	@echo

else
static_library:			.NO_STATIC_LIBRARY
static_library_install:	.NO_STATIC_LIBRARY
endif	#	STATIC


#	Shared library.
ifdef SHARED
shared_library:			.BEGIN_SHARED docs $(SHARED_LIBRARY)

ifdef FAT_MAC_ARCHES
$(SHARED_LIBRARY):	$(ARCH_SHARED_LIBRARIES)
	$(BUILD_FAT_MAC)
$(ARCH_SHARED_LIBRARIES):
	$(BUILD_FAT_MAC_ARCHES)
else
$(SHARED_LIBRARY):	$(SHARED_LIBRARY_OBJECTS)
	@echo
	$(CC) $(LDFLAGS) $(SHARED_LIBRARY_OBJECTS) $(LIBRARIES) -o $@
	@echo
endif	#	FAT_MAC_ARCHES

shared_library_install:	$(SHARED_LIBRARY)
	@echo
	@echo "Installing the shared/dynamic library: $(SHARED_LIBRARY)"
	mkdir -p $(LIB_DIR)
	cp $(SHARED_LIBRARY) $(LIB_DIR)/$(SHARED_LIBRARY).$(VERSION)
	rm -f $(LIB_DIR)/$(SHARED_LIBRARY)
	rm -f $(LIB_DIR)/$(SHARED_LIBRARY).$(MAJOR_VERSION)
	rm -f $(LIB_DIR)/$(KAKADU_SHARED_LIBRARY_NAME)
	ln -s $(SHARED_LIBRARY).$(VERSION) $(LIB_DIR)/$(SHARED_LIBRARY)
	ln -s $(SHARED_LIBRARY).$(VERSION) $(LIB_DIR)/$(SHARED_LIBRARY).$(MAJOR_VERSION)
	ln -s $(SHARED_LIBRARY).$(VERSION) $(LIB_DIR)/$(KAKADU_SHARED_LIBRARY_NAME)
	@echo


ifndef NO_JAVA
jni_library:			.BEGIN_JNI docs $(JNI_LIBRARY)

ifdef FAT_MAC_ARCHES
$(JNI_LIBRARY):	$(JNI_ARCH_SHARED_LIBRARIES)
	$(BUILD_FAT_MAC)
$(JNI_ARCH_SHARED_LIBRARIES):
	$(BUILD_FAT_MAC_ARCHES)

else
$(JNI_LIBRARY):	$(JNI_LIBRARY_OBJECTS)
#	Special case: The JNI_SOURCE is compiled "on-the-fly" since it is not
#	automatically compiled if included in the SHARED_LIBRARY_OBJECTS list
#	when kdu_hyperdoc generates it during the same run of the Makefile.
#	It is seen and compiled automatically in SHARED_LIBRARY_OBJECTS when
#	kdu_hyperdoc generated it during a previous run of the Makefile!
	@echo
	$(CC) $(CXXFLAGS) $(LDFLAGS) $(JNI_SOURCE) $(JNI_LIBRARY_OBJECTS) $(LIBRARIES) -o $@
	@echo
endif	#	FAT_MAC_ARCHES

jni_library_install:	$(JNI_LIBRARY)
	@echo
	@echo "Compiling the JNI classes."
	javac $(PROJECT_ROOT)/java/$(JNI_LIBRARY_NAME)/*.java
	@echo
	@echo "Installing the Java API class files:"
	mkdir -p $(INSTALL_DIR)/$(JNI_LIBRARY_NAME)
	mv -f $(PROJECT_ROOT)/java/$(JNI_LIBRARY_NAME)/*.class $(INSTALL_DIR)/$(JNI_LIBRARY_NAME)
	@echo
	@echo "Installing the Java JNI library: $(JNI_LIBRARY)"
	mkdir -p $(LIB_DIR)
	cp -f $(JNI_LIBRARY) $(LIB_DIR)/$(JNI_LIBRARY).$(VERSION)
	rm -f $(LIB_DIR)/$(JNI_LIBRARY)
	ln -s $(JNI_LIBRARY).$(VERSION) $(LIB_DIR)/$(JNI_LIBRARY)
	@echo

else
jni_library:			.NO_JAVA
jni_library_install:	.NO_JAVA
.NO_JAVA:
	@echo
	@echo "*** No Java Native Interfaces library was built (NO_JAVA set)."
	@echo
endif	#	NO_JAVA

else
shared_library:			.NO_SHARED_LIBRARY
shared_library_install:	.NO_SHARED_LIBRARY
jni_library:			.NO_SHARED_LIBRARY
jni_library_install:	.NO_SHARED_LIBRARY
endif	#	SHARED


install:			.BEGIN \
					.BEGIN_INSTALL \
					bin_install \
					headers_install \
					docs_install \
					.END

bin_install:		static_library_install \
					shared_library_install \
					jni_library_install \

headers_install:	docs
	@echo
	@echo "Installing the source code header include files"
	mkdir -p $(INCLUDE_DIR)
	cp -f $(PROJECT_ROOT)/managed/all_includes/* $(INCLUDE_DIR)
	@echo


#	Documentation, JNI interfaces, auxiliary interface and include files:

#	The documentation files are generated by the kdu_hyperdoc utility.
#	In addition, kdu_hyperdoc generates the Java JNI .java class files and
#	intermediate .cpp source code files used to build the kdu_aux library,
#	and assembles all of the public interface header include files.

docs:				kdu_hyperdoc ../kdu_aux/kdu_aux.cpp

#	kdu_hyperdoc is a special case that is built from its dependencies
#	so it will not need the kdu library at runtime.
kdu_hyperdoc_OBJECTS	:=	$(PROJECT_ROOT)/apps/kdu_hyperdoc/kdu_hyperdoc.cpp \
							$(PROJECT_ROOT)/apps/kdu_hyperdoc/jni_builder.cpp \
							$(PROJECT_ROOT)/apps/kdu_hyperdoc/mni_builder.cpp \
							$(PROJECT_ROOT)/apps/kdu_hyperdoc/aux_builder.cpp \
							args.o \
							$(PROJECT_ROOT)/coresys/messaging/messaging.cpp

kdu_hyperdoc:	$(kdu_hyperdoc_OBJECTS)
	$(CC) $(CXXFLAGS) $(kdu_hyperdoc_OBJECTS) -o $@

#	kdu_aux.cpp is one of the files generated by kdu_hyperdoc.
../kdu_aux/kdu_aux.cpp:
	@echo
	@echo "Building the HTML documentation in $(PROJECT_ROOT)/documentation."
	@echo "Generating the JNI java files in $(PROJECT_ROOT)/java/$(JNI_LIBRARY_NAME),"
	@echo "  and the JNI library interface files in $(PROJECT_ROOT)/managed/$(JNI_LIBRARY_NAME)."
	@echo "Generating the auxiliary interface files in $(PROJECT_ROOT)/managed/kdu_aux."
	@echo "Assembling the public include files in $(PROJECT_ROOT)/managed/all_includes."
	@echo
	cd $(PROJECT_ROOT)/documentation; \
	../managed/Build/kdu_hyperdoc \
	  -o html_pages \
	  -s hyperdoc.src \
	  -java ../java/$(JNI_LIBRARY_NAME) \
	        ../managed/$(JNI_LIBRARY_NAME) \
	        ../managed/kdu_aux \
	        ../managed/all_includes
	@echo

ifndef NO_DOCS
docs_install:		docs
	@echo
	@echo "Installing the documentation"
	mkdir -p $(DOCS_DIR)
	cp -R -f $(PROJECT_ROOT)/documentation $(DOCS_DIR)/Kakadu
	@echo
else
docs_install:		.NO_DOCS
.NO_DOCS:
	@echo
	@echo "*** No documentation has been installed (NO_DOCS set)."
	@echo
endif


clean:
	rm -rf \
		*.o *.slo $(STATIC_LIBRARY) $(SHARED_LIBRARY) $(JNI_LIBRARY) \
		kdu_hyperdoc $(FAT_MAC_ARCHES)


.BEGIN_JNI:
	@echo
	@echo "=== $(TITLE) Java JNI library: $(JNI_LIBRARY)"
	@echo


.PHONY:	.BEGIN_JNI jni_library jni_library_install
