#	UA HiRISE PDS_JP2 applications
#
#	gmake syntax
#
#	CVS ID: Makefile,v 1.24 2013/08/03 02:05:45 guym Exp

SUBSYSTEM				=	PDS_JP2
TITLE					=	$(SUBSYSTEM) - $(APPLICATIONS)
R := R
MAKEFILE_REVISION		:=	1.24

PROJECT_ROOT			=	../..

64_BIT_BUILDS		=	true
64_BIT_ONLY			=	true
NO_CONFIG_DIR		=	true
NO_DATA_DIR			=	true
NO_LOGS_DIR			=	true

#	Host system architecture identification.
empty :=
space := $(empty) $(empty)
MACHINE					:=	$(subst $(space),_,$(shell uname -m))
PLATFORM				:=	$(subst $(space),_,$(shell uname -p))
OS						:=  $(subst $(space),_,$(shell uname -s))
KERNEL_RELEASE			:=	$(subst .,$(space),$(shell uname -r))
ifeq ($(PLATFORM),unknown)
PLATFORM = $(MACHINE)
endif
ifneq (,$(findstring CYGWIN, $(OS)))
OS := WIN
endif

#	Application programs:

APPLICATIONS			=	PDS_to_JP2 \
							JP2_to_PDS \
							relocate_label

#	Set the following macro to the default producer signature that will
#	be used to determine the default producer UUID value that provides a
#	unique signature in the JP2 file generated by PDS_to_JP2. The UUID
#	will be stored alongside the relative file URL referencing the
#	external PDS label file created under the control of the PDS_to_JP2
#	application. See
#	http://www.webdav.org/specs/draft-leach-uuids-guids-01.txt for a
#	detailed description of UUIDs.
#
#	If no producer signature is specified, none will be included in the
#	JP2 file that is produced by PDS_to_JP2.
#
#	N.B.: The producer signature can only be used if the OSSP UUID
#	software library is available (see OSSP_UUID, below).
#
#!!	Subsystem Makefile overrides this value.

#PRODUCER_SIGNATURE		?= 

#	If the OSSP UUID software library is not available the following
#	macro may be set to the UUID to be included in the JP2 produced by
#	PDS_to_JP2. The UUID must be 16 8-bit, comma separated values.
#	Software for producing UUID values is available on line (e.g.
#	http://www.ossp.org/pkg/lib/uuid/). By having this OSSP UUID
#	available at compile time the producer signature, above, can be
#	specified instead which is the preferred solution that is easiest
#	for users. If the producer signature is specified it will be used to
#	generate the UUID and any UUID value specified here will be ignored.
#
#	If no UUID value is specified, and no producer signature is
#	specified to produce one, none will be included in the JP2 file that
#	is produced by PDS_to_JP2.
#
#!!	Subsystem Makefile overrides this value.
#
#	This definition is the UUID for "".
PRODUCER_UUID			?= \
		0x2b, 0x0d, 0x7e, 0x97, 0xaa, 0x2e, 0x31, 0x7d, \
		0x91, 0x33, 0xe5, 0x31, 0x61, 0xa2, 0xf7, 0xd0


#	Libraries:

#	N.B.: Libarary use here should be consistent with the libPDS_JP2 Makefile.

#	OSSP uuid++ library.
#	If OSSP support for UUID generation is to be included,
#		uncomment the next line.
#!!	Subsystem Makefile overrides this value.
#OSSP_UUID				?=	OSSP_UUID
OSSP_UUID_SUPPORT		=	-DINCLUDE_OSSP_UUID
OSSP_UUID_INCLUDE		=	-I$(OSSP_UUID_ROOT)/include
OSSP_UUID_LIBRARY		=	-L$(OSSP_UUID_ROOT)/lib -luuid++$(64) \
								$(NETWORK_LIBS)
OSSP_UUID_DIST			=	$(OSSP_UUID_ROOT)/lib/libuuid++$(64)

#	GDAL library.
#	If support for Geo_TIFF and GML JP2 boxes is to be included,
#		uncomment the next line.
#!!	Subsystem Makefile overrides this value.
#GDAL					?=	GDAL
GDAL_SUPPORT			=	-DINCLUDE_GDAL
GDAL_INCLUDE			=	-I$(GDAL_ROOT)/include
GDAL_LIBRARY			=	-L$(GDAL_ROOT)/lib -lgdal$(64)
GDAL_DIST				=	$(GDAL_ROOT)/lib/libgdal$(64)

#	PVL library.
PVL_INCLUDE				=	-I$(IDAEIM_ROOT)/include -I$(IDAEIM_ROOT)/include/PVL -I$(IDAEIM_ROOT)/include/Strings -I$(IDAEIM_ROOT)/include/Utility
ifeq ($(OS),WIN)
	PVL_LIBRARY				=	-L$(IDAEIM_ROOT)/lib \
									PVL$(64).lib \
									Strings$(64).lib \
									Utility$(64).lib
	PVL_DIST				=	$(IDAEIM_ROOT)/lib/PVL$(64) \
								$(IDAEIM_ROOT)/lib/Strings$(64) \
								$(IDAEIM_ROOT)/lib/Utility$(64)
else
	PVL_LIBRARY				=	-L$(IDAEIM_ROOT)/lib \
									-lPVL$(64) \
									-lStrings$(64) \
									-lUtility$(64)
	PVL_DIST				=	$(IDAEIM_ROOT)/lib/libPVL$(64) \
								$(IDAEIM_ROOT)/lib/libStrings$(64) \
								$(IDAEIM_ROOT)/lib/libUtility$(64)
endif

#	Kakadu JPEG2000 library.
KAKADU_INCLUDE			=	-I$(KAKADU_ROOT)/include
ifneq ($(OS),WIN)
KAKADU_LIBRARY			=	-L$(KAKADU_ROOT)/lib \
								-ltiff \
								-lkdu_a$(64) \
								-lkdu$(64) \
								-lpthread
else

# ifndef 64
# KAKADU_LIBRARY			=	-L$(KAKADU_ROOT)/lib/Win32 \
								# kdu_a63R.lib \
								# kdu_v63R.lib
# else
KAKADU_LIBRARY			=	-L$(KAKADU_ROOT)/lib/x64 \
								kdu_a63R.lib \
								kdu_v63R.lib
# endif

endif

#	PIRL C++ class library.
PIRL_INCLUDE			=	-I$(PIRL_ROOT)/include
PIRL_LIBRARY			=	-L$(PIRL_ROOT)/lib \
								-lPIRL++$(64)
PIRL_DIST				=	$(PIRL_ROOT)/lib/libPIRL++$(64)

#	All applications depend on the subsystem library.
SUBSYSTEM_LIB_DIR		=	../lib$(SUBSYSTEM)
SUBSYSTEM_LIB_NAME		=	lib$(SUBSYSTEM)$(64).$(SHARED_LIBRARY_EXT)
SUBSYSTEM_LIB			=	$(SUBSYSTEM_LIB_DIR)/$(SUBSYSTEM_LIB_NAME)

ifeq ($(OS),WIN)
LIBRARIES				+=	ADVAPI32.LIB \
							WS2_32.LIB \
							USERENV.LIB
							
LIBRARIES				+= 	$(SUBSYSTEM_LIB_DIR)/lib$(SUBSYSTEM)$(64).lib \
							$(PVL_LIBRARY) \
							$(KAKADU_LIBRARY) \
							$($(GDAL)_LIBRARY) \
							$(PIRL_LIBRARY) \
							$($(OSSP_UUID)_LIBRARY)
else
LIBRARIES				+= 	-L$(SUBSYSTEM_LIB_DIR) \
								-l$(SUBSYSTEM)$(64) \
							$(PVL_LIBRARY) \
							$(KAKADU_LIBRARY) \
							$($(GDAL)_LIBRARY) \
							$(PIRL_LIBRARY) \
							$($(OSSP_UUID)_LIBRARY)
endif

#	Include files:
ifeq ($(OS),WIN)
INCLUDES				=	-I$(SUBSYSTEM_LIB_DIR) \
							$(PVL_INCLUDE) \
							$(KAKADU_INCLUDE) \
							$(PIRL_INCLUDE) \
							$($(OSSP_UUID)_INCLUDE) \
							$($(GDAL)_INCLUDE)
else
INCLUDE					=	-I$(SUBSYSTEM_LIB_DIR) \
							$(PVL_INCLUDE) \
							$(KAKADU_INCLUDE) \
							$(PIRL_INCLUDE) \
							$($(OSSP_UUID)_INCLUDE) \
							$($(GDAL)_INCLUDE)
endif

#	Preprocessor flags:

ifneq ($(strip $(64_BIT_BUILDS)),)
CPPFLAGS 					+=	-D_LARGEFILE64_SOURCE -D_FILE_OFFSET_BITS=64
endif

.applications:	CPPFLAGS	+=	-DMODULE_VERSION='"$(SUBSYSTEM_VERSION)"'


#	Targets:

all:
.all:				.applications

#	DEBUG
debug:				.applications

#	Installation:

.install:			.bin_install

.bin_install:		.applications_install


#	Cleaning:

.dist_clean:		dist_wipe clean_links

clean_links:
	-$(RM) VERSION


#	Project Makefile configuration.
include				$(PROJECT_ROOT)/Build/Makefile.conf

#	Binary distribution:

#	Software distribution (needs Makefile.conf).
DISTRIBUTION			=	$(SUBSYSTEM)-$(SUBSYSTEM_VERSION)_$(OS)-$(PLATFORM)
TARBALL					=	$(DISTRIBUTION).tar.gz
TARBALL_LINK			=	$(SUBSYSTEM)_$(OS)-$(PLATFORM).tar.gz
DIST_LIBRARIES			=	$($(OSSP_UUID)_DIST) \
							$($(GDAL)_DIST) \
							$(PVL_DIST) \
							$(KAKADU_DIST) \
							$(PIRL_DIST)

ifeq ($(strip $(OS)),Darwin)
DY_LIB_LISTER = otool -L
else
DY_LIB_LISTER = ldd
endif

dist:				.BEGIN bin_dist .END

bin_dist:			$(TARBALL)
$(TARBALL):			dist_wipe
	@echo
	@echo "=== Assembling the binary distribution package: $@"
	@echo
	$(MKDIR) -p $(DISTRIBUTION)
	@echo
	@echo "--- Copying the installation documention and scripts"
	@echo
	$(CP) $(PROJECT_ROOT)/Build/License/Copyright_Notice.GPL $(DISTRIBUTION)
	$(CP) $(PROJECT_ROOT)/Build/License/LICENSE.GPL $(DISTRIBUTION)
	$(CP) INSTALL-binary Installer Uninstaller $(DISTRIBUTION)
	@echo
	@echo "--- Rebuilding the library and applications"
	@echo
	$(MAKE) -C $(SUBSYSTEM_LIB_DIR) CSPICE=  .clean .shared_library
	@echo
	$(MAKE) PRODUCER_SIGNATURE= CSPICE= .clean .applications fix_lib_names
	@echo
	@echo "--- Copying the libraries"
	@echo
	$(MKDIR) -p $(DISTRIBUTION)/lib
	@echo
	@echo "Library $(SUBSYSTEM_LIB)"
	$(CP) $(SUBSYSTEM_LIB) $(DISTRIBUTION)/lib/$(SUBSYSTEM_LIB_NAME)-$(SUBSYSTEM_VERSION)
	$(LN) $(SUBSYSTEM_LIB_NAME)-$(SUBSYSTEM_VERSION) $(DISTRIBUTION)/lib/$(SUBSYSTEM_LIB_NAME)
	@for lib in $(DIST_LIBRARIES) ; \
	do \
		lib_path=$$lib.$(SHARED_LIBRARY_EXT) ; \
		echo ; \
		echo "Library $$lib_path"; \
		if [ ! -f $$lib_path ] ; then \
			echo "Missing library: $$lib_path" ; \
			exit 1 ; \
		fi ; \
		count=`/bin/ls -l $$lib_path | tr -s ' ' | wc -w` ; \
		actual_name=`/bin/ls -l $$lib_path | tr -s ' ' | cut -d' ' -f$$count` ; \
		actual_path=`dirname $$lib`/$$actual_name ; \
		echo " Actual $$actual_path" ; \
		echo $(CP) $$actual_path $(DISTRIBUTION)/lib ; \
		$(CP) $$actual_path $(DISTRIBUTION)/lib ; \
		lib_base=`basename $$lib_path` ; \
		if [ $$lib = "$(GDAL_DIST)" -a $$actual_name != "libgdal.so.1" ] ; then \
			echo "$(LN) $$actual_name $(DISTRIBUTION)/lib/libgdal.so.1" ; \
			$(LN) $$actual_name $(DISTRIBUTION)/lib/libgdal.so.1 ; \
		fi ; \
		for bin in $(APPLICATIONS) $(SUBSYSTEM_LIB) ; \
		do \
			dy_lib_name=`$(DY_LIB_LISTER) $$bin | grep $$lib_base | tr -d '\t' | cut -d' ' -f1` ; \
			if [ -z "$$dy_lib_name" ] ; then continue; fi ; \
			if [ -f "$(DISTRIBUTION)/lib/$$dy_lib_name" ] ; then continue; fi ; \
			echo "Linked to $$dy_lib_name in $$bin" ; \
			echo $(LN) $$actual_name $(DISTRIBUTION)/lib/$$dy_lib_name ; \
			$(LN) $$actual_name $(DISTRIBUTION)/lib/$$dy_lib_name ; \
		done ; \
	done
	@echo
	@echo "--- Copying the applications"
	@echo
	$(MKDIR) -p $(DISTRIBUTION)/bin
	$(CP) $(APPLICATIONS) $(DISTRIBUTION)/bin
	@echo
	@echo "--- Adding the documentation"
	@echo
	$(MKDIR) -p $(DISTRIBUTION)/docs
	$(MAKE) -C .. .docs
	$(CP) -R -p ../docs/* $(DISTRIBUTION)/docs
	@echo
	@echo "--- Making the tarball"
	@echo
	gtar czf $@ $(DISTRIBUTION)
	$(LN) $@ $(TARBALL_LINK)
    ifeq ($(strip $(OS)),Darwin)
	-$(RM) -r $(DISTRIBUTION)
	-$(RM) -r $(DISTRIBUTION)
	-$(RM) -r $(DISTRIBUTION)
    endif
	-$(RM) -r $(DISTRIBUTION)
	$(MV) $@ $(TARBALL_LINK) ..
	@echo
	@echo "--- Clean up"
	@echo
	$(MAKE) -C $(SUBSYSTEM_LIB_DIR) .clean
	$(MAKE) .clean
	@echo
	@echo "=== Binary distribution package: $@"
	@echo

fix_lib_names:
    ifeq ($(strip $(OS)),Darwin)
	@echo
	@echo "--- Setting library and application link libraries to generic names"
	@for bin in $(APPLICATIONS) $(SUBSYSTEM_LIB) ; \
	do \
	for lib in $(DIST_LIBRARIES) ; \
	do \
		ap_lib=`otool -L $$bin | grep $$lib | tr -d '\t' | cut -d' ' -f1` ; \
		if [ -z "$$ap_lib" ] ; then continue; fi ; \
		lib_name=`basename $$lib`.$(SHARED_LIBRARY_EXT) ; \
		echo "install_name_tool -change $$ap_lib $$lib_name $$bin" ; \
		install_name_tool -change $$ap_lib $$lib_name $$bin ; \
	done \
	done
    endif

dist_wipe:
    ifeq ($(strip $(OS)),Darwin)
	-$(RM) -r $(TARBALL) $(DISTRIBUTION)
	-$(RM) -r $(TARBALL) $(DISTRIBUTION)
	-$(RM) -r $(TARBALL) $(DISTRIBUTION)
    endif
	$(RM) -r $(TARBALL) $(DISTRIBUTION)
	$(RM) $(TARBALL_LINK)

#	This section comes after the Makefile.conf include 
#	because $(64) and $(PLATFORM) must be defined first for these targets.

ifneq ($(strip $(PRODUCER_SIGNATURE)),)
PDS_to_JP2.o$(64):	CPPFLAGS	+=	-DPRODUCER_SIGNATURE='"$(PRODUCER_SIGNATURE)"'
PDS_to_JP2.obj:		CPPFLAGS	+=	-DPRODUCER_SIGNATURE='"$(PRODUCER_SIGNATURE)"'
else
ifneq ($(strip $(PRODUCER_UUID)),)
PDS_to_JP2.o$(64):	CPPFLAGS	+=	-DPRODUCER_UUID='$(PRODUCER_UUID)'
PDS_to_JP2.obj:		CPPFLAGS	+=	-DPRODUCER_UUID='$(PRODUCER_UUID)'
endif
endif
PDS_to_JP2.o$(64):	CPPFLAGS	+=	$($(GDAL)_SUPPORT) \
									$($(OSSP_UUID)_SUPPORT)
PDS_to_JP2.obj:		CPPFLAGS	+=	$($(GDAL)_SUPPORT) \
									$($(OSSP_UUID)_SUPPORT)
									
JP2_to_PDS:			override OSSP_UUID	=
JP2_to_PDS:			override GDAL		=
JP2_to_PDS.o$(64):	override OSSP_UUID	=
JP2_to_PDS.obj:		override OSSP_UUID	=
JP2_to_PDS.obj:		override GDAL		=

$(PROGRAMS):	$(SUBSYSTEM_LIB)
$(SUBSYSTEM_LIB):
	@$(MAKE) -C $(SUBSYSTEM_LIB_DIR) .libraries

#	Solaris puts the socket and gethostbyname functions required by OSSP_UUID
#	in separate system libraries.
ifeq ($(strip $(PLATFORM)),sparc)
NETWORK_LIBS			=	-lsocket -lnsl
endif


.PHONY:	all .all debug \
		.install .bin_install \
		.dist_clean clean_links \
		dist bin_dist $(TARBALL) dist_wipe fix_lib_names
