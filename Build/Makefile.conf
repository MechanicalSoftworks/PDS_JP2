#	HiRISE Makefile.conf
#
#	gmake v3.81 syntax
#
#	CVS ID: Makefile.conf,v 2.97 2013/06/21 18:57:42 guym Exp

PROJECT					:=	UA::HiRISE
R := R
CONF_MAKEFILE_REVISION	:=	2.97

ifndef MACHINE
#===============================================================================
#	Host machine architecture identification.
#
#	Note: Makefile.host provides these same definitions used here for use
#	where the host identification must be determined before Makefile.conf
#	is included. Makefile.host could simply be include-d here, but all
#	include-d file pathnames, if not absolute, are relative to the
#	directory that is current when gmake is run. Thus, unless
#	PROJECT_ROOT is correctly defined by the client Makefile that has
#	include-d this Makefile.conf, the location of Makefile.host relative
#	to the client Makefile is unknown. Unfortunately, many client
#	Makefile implementors do not define PROJECT_ROOT. So the contents of
#	Makefile.host are duplicated here with a guard condition in case it
#	has already been include-d.

empty :=
space := $(empty) $(empty)
MACHINE					:=	$(subst $(space),_,$(shell uname -m))
PLATFORM				:=	$(subst $(space),_,$(shell uname -p))
OS						:=	$(subst $(space),_,$(shell uname -s))
KERNEL_RELEASE			:=	$(subst .,$(space),$(shell uname -r))
ifeq ($(PLATFORM),unknown)
PLATFORM = $(MACHINE)
endif
ifneq (,$(findstring CYGWIN, $(OS)))
#	MS/Windows.
OS := WIN
endif

endif	#	MACHINE

#===============================================================================
#	Apple Mac (Darwin) "fat Mac" (universal) binaries.
#
#	On a Darwin OS that is not a Power_Macintosh MACHINE the FAT_MAC
#	architectures will be included in the fat Mac binaries. If FAT_MAC is
#	not defined only the host system architecture will be supported by the
#	binaries that are built.
#
#	N.B. Darwin systems that support 64-bit x86_64 architectures may report
#	themselves as i386; these systems will still build x86_64 binaries
#	unless coerced to use the i386 architecture at compile/link time.

ifeq ($(OS),Darwin)
ifneq ($(MACHINE),Power_Macintosh)
ifeq ($(firstword $(KERNEL_RELEASE)),10)
#	For kernel version 10 with PowerPC (ppc) support.
#FAT_MAC			?=	-arch x86_64 \
#					-arch i386 \
#					-arch ppc

#	There are too many dependency libraries w/o fat Mac support.
#	All the dependency libraries need to be upgraded before full
#	fat Mac support can be provided.
FAT_MAC			?=	-arch i386
else
#	Other kernel on intel without ppc support.
FAT_MAC			?=	-arch x86_64 \
					-arch i386
endif
endif
endif

#===============================================================================
#	Directory locations.

ifeq ($(OS),WIN)
#	MS/Windows directory for logical Cygwin root directory.
#		>>> WARNING <<< MS/Windows does not natively follow links!
ROOT_DIR				?=	D:/cygwin
endif

HiRISE_ROOT				?=	$(ROOT_DIR)/HiRISE

PROJECT_ROOT			?=	..
INSTALL_DIR				?=	$(PROJECT_ROOT)
DOCS_INSTALL_DIR		?=	$(INSTALL_DIR)

CONFIG_DIR				:=	Configuration
SUBSYSTEM_CONFIG_DIR	=	$(CONFIG_DIR)/$(SUBSYSTEM)
DATA_DIR				:=	Data
SUBSYSTEM_DATA_DIR		=	$(DATA_DIR)/$(SUBSYSTEM)
LOGS_DIR				:=	Logs
SUBSYSTEM_LOGS_DIR		=	$(LOGS_DIR)/$(SUBSYSTEM)

DOCS_DIR				:=	docs
DOCS_HTML_DIR			=	$(DOCS_DIR)/html/HiRISE/$(SUBSYSTEM)
DOCS_MAN_DIR			:=	$(DOCS_DIR)/man
JAVADOCS_DIR			:=	$(INSTALL_DIR)/docs/html/HiRISE/Java


#	Commonly used third party packages:

#	The location of the PIRL++ classes.
PIRL_ROOT				?=	$(ROOT_DIR)/opt/local

#	The location of the idaeim::PVL classes.
IDAEIM_ROOT				?=	$(ROOT_DIR)/opt/idaeim

#	The location of the boost classes.
BOOST_ROOT				?=	$(ROOT_DIR)/opt/pub

#	The location of the MySQL and MySQL add-on libraries.
MYSQL_ROOT				?=	$(ROOT_DIR)/opt/mysql_ab/mysql

#	The location of the NAIF SPICE software (CSPICE).
CSPICE_ROOT				?=	$(ROOT_DIR)/opt/naif

#	The location of the ISIS software.
ISIS_ROOT				?=	$(ROOT_DIR)/HiRISE/ISIS

#	The location of the Kakadu JPEG2000 software.
KAKADU_ROOT				?=	$(ROOT_DIR)/opt/Kakadu

#	The location of the OSSP UUID software.
OSSP_UUID_ROOT			?=	$(ROOT_DIR)/opt/pub

#	The location of the GDAL software.
GDAL_ROOT				?=	$(ROOT_DIR)/opt/pub

#===============================================================================
#	Permissions of installed files.

SOURCE_FILE_PERMISSIONS	:=	a+r,u+w,g-w,o-w
BIN_PERMISSIONS			:=	a=rx,u+w,g-w,o-w
CONFIG_FILE_PERMISSIONS	:=	a+r,u+w,g+w,o-w
DOCS_FILE_PERMISSIONS	:=	a+r,u+w,g-w,o-w
PRIVATE_FILE_PERMISSIONS :=	u+rw,g+r,g-w,o-rwx

DIR_PERMISSIONS			:=	a=rx,u+w,g+s,g-w,o-w
CONFIG_DIR_PERMISSIONS	:=	a=rx,u+w,g+s,g+w,o-w
DATA_DIR_PERMISSIONS	:=	a=rx,u+w,g+s,g+w,o-w
LOGS_DIR_PERMISSIONS	:=	a=rx,u+w,g+s,g+w,o-w
DOCS_DIR_PERMISSIONS	:=	a=rx,u+w,g+s,g-w,o-w
PRIVATE_DIR_PERMISSIONS	:=	u=rwx,g=rxs,o-rwx

#	Group membership is normally set by the system.
GROUP					?=	nogroup

#===============================================================================
#	64-bit builds:
#
#	If the OS is one of the MAKE_64_OS systems separate 64-bit binaries
#	can be built in addition to the default 32-bit binaries.
#
#	By default, both 32-bit and 64-bit binaries will be built. The files
#	containing 64-bit versions of the binaries will have the value of
#	the 64_BIT_FILES variable appended to application names (unless
#	32_BIT_DEFAULT is defined), library names (before the extension) and
#	object file names (after the extension).
#
#	If 32_BIT_ONLY is defined, then only 32-bit builds will be produced.
#	If 64_BIT_ONLY is defined, then only 64-bit builds will be produced.
#
#	If 32_BIT_DEFAULT is defined, the APPLICATIONS names will be used
#	unchanged for the 32-bit versions of applications and the 64-bit
#	versions will have the value of the 64_BIT_FILES variable appended
#	to their names. Otherwise the 32-bit versions of applications will
#	be appended with the value of the 32_BIT_FILES variable and the
#	64-bit executables will use the APPLICATIONS names unchanged.

ifneq ($(MACHINE),i86pc)
MAKE_64_OS				:=	SunOS
endif

#	The NN-bit version binary filename extension.
64_BIT_FILES			:=	_64
32_BIT_FILES			:=	_32

ifdef 32_BIT_ONLY
ifdef 64_BIT_ONLY
$(error Only one of 32_BIT_ONLY and 64_BIT_ONLY may be specified)
endif
override 64_BIT_BUILDS	:=
endif

ifdef 64_BIT_ONLY
ifdef 32_BIT_ONLY
$(error Only one of 32_BIT_ONLY and 64_BIT_ONLY may be specified)
endif
override 64_BIT_BUILDS	:=	true
ifneq ($(filter $(OS),$(MAKE_64_OS)),)
64						:=	$(64_BIT_FILES)
endif
endif

ifdef 64
#	Selects 64-bit builds.
override 64				:=	$(64_BIT_FILES)
endif

#===============================================================================
#	Source and product file definitions.

#	Application programs:

#	The subsystem Makefile may specify either APPLICATION or APPLICATIONS.
#	APPLICATIONS is always used in this file.
ifneq ($(strip $(APPLICATION)),)
APPLICATIONS			=	$(APPLICATION)
endif
#	Source code filename extension (cc or c).
ifeq ($(strip $(SOURCE_CODE)),)
SOURCE_CODE				=	cc
endif

ifneq ($(strip $(APPLICATIONS)),)
#	PROGRAMS based on APPLICATIONS.
PROGRAMS				:=	$(APPLICATIONS:%=%$(64))

#	PROGRAM_SOURCES based on APPLICATIONS.
#	APPLICATION_SOURCES, if any, are defined in the subsystem Makefile.
PROGRAM_SOURCES			:=	$(APPLICATIONS:%=%.$(SOURCE_CODE)) \
							$(APPLICATION_SOURCES)
endif


#	Object files:

#	Object filename extension.
ifeq ($(OS),WIN)
OBJECT_EXTENSION		:=	obj
else
OBJECT_EXTENSION		:=	o
endif

#	MAIN_OBJECTS based on APPLICATIONS.
MAIN_OBJECTS			:=	$(APPLICATIONS:%=%.$(OBJECT_EXTENSION)$(64))
#	PROGRAM_OBJECTS based on APPLICATION_SOURCES.
PROGRAM_OBJECTS			+=	\
	$(APPLICATION_SOURCES:%.$(SOURCE_CODE)=%.$(OBJECT_EXTENSION)$(64))

#	Additional program objects based on application_OBJECTS.
#	Qualify the object filenames of each application_OBJECTS list.
define application_OBJECTS
$(1)_OBJECTS			=	$($(1)_OBJECTS:%=%$(64))
endef
$(foreach app, $(APPLICATIONS), $(eval $(call application_OBJECTS,$(app))))

PROGRAM_OBJECTS_ADDITIONS	:=	\
	$(foreach app, $(APPLICATIONS:%=%_OBJECTS), $($(app)))


#	Source code files:

#	Additional program objects source code files.
PROGRAM_SOURCES_ADDITIONS	:=	\
	$(APP_ADDITIONS:%.$(OBJECT_EXTENSION)$(64)=%.$(SOURCE_CODE))

#	All source code files.
SOURCES					=	$(PROGRAM_SOURCES) \
							$(PROGRAM_SOURCES_ADDITIONS) \
							$(LIBRARY_SOURCES)


#	Header include files:

#	HEADERS based on LIBRARY_SOURCES.
HEADER_EXT				=	$(subst c,h,$(SOURCE_CODE))
HEADERS					+=	$(LIBRARY_SOURCES:%.$(SOURCE_CODE)=%.$(HEADER_EXT))


#	Libraries:

#	Library filename extension.
ifeq ($(OS),Darwin)
STATIC_LIBRARY_EXT		:= 	a
SHARED_LIBRARY_EXT		:=	dylib
else ifeq ($(OS),WIN)
STATIC_LIBRARY_EXT		:= 	lib
SHARED_LIBRARY_EXT		:=	dll
else
STATIC_LIBRARY_EXT		:= 	a
SHARED_LIBRARY_EXT		:=	so
endif

#	Shared/dynamic LIBRARY_OBJECTS based on LIBRARY_SOURCES.
LIBRARY_OBJECTS			+=	\
	$(LIBRARY_SOURCES:%.$(SOURCE_CODE)=%.$(OBJECT_EXTENSION)$(64))
SHARED_LIBRARY_OBJECTS_EXT	:=	slo
SHARED_LIBRARY_OBJECTS		=	\
	$(LIBRARY_OBJECTS:%.$(OBJECT_EXTENSION)$(64)=%.$(SHARED_LIBRARY_OBJECTS_EXT)$(64))

#	Libraries based on LIBRARY.
STATIC_LIBRARY			:=	$(LIBRARY:%=lib%$(64).$(STATIC_LIBRARY_EXT))
SHARED_LIBRARY			:=	\
	$(STATIC_LIBRARY:%.$(STATIC_LIBRARY_EXT)=%.$(SHARED_LIBRARY_EXT))
					
#===============================================================================
#	Java.

#		SDK JFC Packages.
JAVA_SDK_URL			?=	\
	http://pirlwww.lpl.arizona.edu/resources/guide/software/Java/api

#		HiRISE Packages.
HiRISE_JAVA_DIR			?=	$(INSTALL_DIR)
HiRISE_JAVADOCS_DIR		?=	$(INSTALL_DIR)/docs/html/HiRISE/Java


#		PIRL Java Packages.
PIRL_JAVA_DIR			?=	/opt/java
PIRL_JAVA_URL			?=	\
	http://pirlwww.lpl.arizona.edu/software/PIRL_Java_Packages

#		Third-Party Java Software.

THIRD_PARTY_URL_BASE	?=	\
	http://pirlwww.lpl.arizona.edu/resources/guide/software

#		JFree Project.
JFREE_DIR				?=	/opt/java/JFree
JCOMMON_JAR				?=	$(JFREE_DIR)/jcommon.jar
JCOMMON_URL				?=	$(THIRD_PARTY_URL_BASE)/jcommon
JFREECHART_JAR			?=	$(JFREE_DIR)/jfreechart.jar
JFREECHART				?=	$(JCOMMON_JAR):$(JFREECHART_JAR)
JFREECHART_URL			?=	$(THIRD_PARTY_URL_BASE)/jfreechart
JFREE_JARS				?=	$(JFREECHART):$(JCOMMON_JAR)

#		MySQL JDBC driver.
MYSQL_DRIVER_DIR		?=	/opt/java/mysql-connector
MYSQL_DRIVER_JAR		?=	$(MYSQL_DRIVER_DIR)/mysql-connector.jar

#		Java Components for Mathematics.
JCM_DIR					?=	/opt/java/jcm
JCM_JAR					?=	$(JCM_DIR)/jcm_data.jar
JCM_URL					?=	$(THIRD_PARTY_URL_BASE)/JCM/javadocs

#		Mars Target Tool (MTT) Packages.
MTT_DIR					?=	/opt/java/MTT
MTT_JAR					?=	$(MTT_DIR)/lib/jmars.jar
MTT_URL					?=	$(THIRD_PARTY_URL_BASE)/MTT

#		SwingX Project.
SWINGX_DIR				?=	/opt/java/SwingX
SWINGX_JAR				?=	$(SWINGX_DIR)/swingx.jar
SWINGX_URL				?=	$(THIRD_PARTY_URL_BASE)/SwingX
SWINGWORKER_DIR			?=	/opt/java/SwingWorker
SWINGWORKER_JAR			?=	$(SWINGWORKER_DIR)/swing-worker.jar
SWINGWORKER_URL			?=	$(THIRD_PARTY_URL_BASE)/SwingWorker
SWINGX_JARS				?=	$(SWINGX_JAR):$(SWINGWORKER_JAR)

#		HiVali dependencies.
ACTIVATION_DIR			?=	/opt/java/Activation
ACTIVATION_JAR			?=	$(ACTIVATION_DIR)/activation.jar
ACTIVATION_URL			?=	$(THIRD_PARTY_URL_BASE)/Activation
MAIL_DIR				?=	/opt/java/Mail
MAIL_JAR				?=	$(MAIL_DIR)/mail.jar
MAIL_URL				?=	$(THIRD_PARTY_URL_BASE)/Mail
HiVali_JARS				?=	$(ACTIVATION_JAR):$(MAIL_JAR)

#		HiReport dependencies.
STRUTS1_DIR				?=	/opt/java/Struts1
STRUTS1_JAR				?=	$(STRUTS1_DIR)/struts.jar:$(STRUTS1_DIR)/extras.jar
STRUTS_DIR				?=	$(STRUTS1_DIR)
STRUTS_JAR				?=	$(STRUTS1_JAR)
JSTL_DIR				?=	/opt/java/JSTL
JSTL_JAR				?=	$(JSTL_DIR)/jstl.jar
JAKARTA_TAGLIBS_JAR		?=	$(JSTL_DIR)/standard.jar
DISPLAYTAG_DIR			?=	/opt/java/Displaytag
DISPLAYTAG_JAR			?=	$(DISPLAYTAG_DIR)/displaytag.jar
STAX_DIR				?=	/opt/java/StAX
STAX_JSR173_API_JAR		?=	$(STAX_DIR)/jsr173_api.jar
STAX_JSR173_RI_JAR		?=	$(STAX_DIR)/jsr173_ri.jar
JSR_JAR					?=	$(STAX_DIR)/jsr.jar
TOMCAT_DIR				?=	/opt/java/Tomcat
JSP_JAR					?=	$(TOMCAT_DIR)/jsp.jar
SERVLET_JAR				?=	$(TOMCAT_DIR)/servlet.jar
COMMONS-COLLECTIONS_JAR	?=	\
	/opt/java/commons-collections/commons-collections.jar
COMMONS-EL_JAR			?=	/opt/java/commons-el/commons-el.jar
COMMONS-LANG_JAR		?=	/opt/java/commons-lang/commons-lang.jar
JEXCELAPI_JAR			?=	/opt/java/jexcelapi/jxl.jar
GSON_DIR				?=	/opt/java/google-gson
GSON_JAR				?=	$(GSON_DIR)/gson.jar
SJSXP_DIR				?=	/opt/java/sjsxp
SJSXP_JAR				?=	$(SJSXP_DIR)/sjsxp.jar
JTS_DIR              ?= /opt/java/JTS
JTS_JAR              ?= $(JTS_DIR)/jts.jar
HiReport_JARS			?=	$(STRUTS1_JAR):$(STRUTS_JAR):$(JSTL_JAR):$(JAKARTA_TAGLIBS_JAR):$(DISPLAYTAG_JAR):$(STAX_JSR173_API_JAR):$(STAX_JSR173_RI_JAR):$(JSR_JAR):$(JSP_JAR):$(SERVLET_JAR):$(COMMONS-COLLECTIONS_JAR):$(COMMONS-EL_JAR):$(COMMONS-LANG_JAR):$(JEXCELAPI_JAR):$(GSON_JAR):$(SJSXP_JAR):$(JTS_JAR)
TOMCAT_INSTALL_DIR		?=	$(INSTALL_DIR)/Tomcat

#		HiCat dependencies.
COMMONS-NET_JAR			?=	/opt/java/commons-net/commons-net.jar
COMMONS-NET-FTP_JAR		?=	/opt/java/commons-net/commons-net-ftp.jar
COMMONS-CLI_JAR			?=	/opt/java/commons-cli/commons-cli.jar
HiCat_JARS				?=	$(COMMONS-NET_JAR):$(COMMONS-NET-FTP_JAR):$(COMMONS-CLI_JAR)

THIRD_PARTY_JAVA		?=	$(JFREE_JARS):$(SWINGX_JARS):$(HiVali_JARS):$(HiReport_JARS):$(HiCat_JARS):$(MTT_JAR)

#	Used to set the Java CLASSPATH.
ifeq ($(strip $(JPATH)),)
JPATH					=	\
	$(PROJECT_ROOT)/..:$(PIRL_JAVA_DIR):$(THIRD_PARTY_JAVA)
endif

#	JAVA_CLASSES based on JAVA_SOURCES.
JAVA_CLASSES			=	$(JAVA_SOURCES:%.java=%.class)

#===============================================================================
#	Commonly used utilties.

#	Source code compiler.
ifeq ($(OS),WIN)
COMPILER				?=	cl.exe

else
ifeq ($(OS),Darwin)
ifneq ($(MACHINE),Power_Macintosh)
#	For kernel version 10 with PowerPC support.
ifeq ($(firstword $(KERNEL_RELEASE)),10)
#	To provide lowest-common-denominator fat Mac builds
#	compatible with the Qt configuration the gcc v4.0.x compiler is used.
COMPILER				?=	g++
endif
endif
endif
endif

ifndef COMPILER
ifeq ($(strip $(SOURCE_CODE)),cc)
COMPILER				?=	g++
endif
ifeq ($(strip $(SOURCE_CODE)),c)
COMPILER				?=	gcc
endif
endif

CC						=	$(COMPILER)
CXX						=	$(COMPILER)

MV						?=	mv
CP						?=	cp
CHMOD					?=	chmod
CHOWN					?=	chown
CHGRP					?=	chgrp
STRIP					?=	strip
RM						?=	rm -f
MKDIR					?=	mkdir
LN						?=	ln -n -s
FIND					?=	find
INSTALL					?=	install
RANLIB					?=	ranlib
JAVAC					?=	javac
PERL					?=	perl
XALAN					?=	Xalan
XSLTPROC				?= 	xsltproc
SED						?=	sed

#*******************************************************************************
#	The remainder of this Makefile is only used by subsystems.
ifndef MASTER_MAKEFILE

ifndef NO_VERSION
#	Try to make the VERSION file.
pseudo					:=	$(shell $(MAKE) NO_VERSION=true .VERSION)
SUBSYSTEM_VERSION		:=	$(shell grep '^[0-9]' VERSION)
ifeq ($(strip $(SUBSYSTEM_VERSION)),)
$(warning ---------------)
$(warning No VERSION file)
$(warning ---------------)
SUBSYSTEM_VERSION		:=	0.0
endif
endif

ifndef TITLE
TITLE = $(SUBSYSTEM)
endif

#===============================================================================
#	Consistency checks.

ifdef NO_CONFIG_DIR
ifeq ($(strip $(CONFIGS)),)
NO_CONFIGS	:= true
endif
endif

#===============================================================================
#	Determines if 64-bit binaries should be built.

ifdef 32bit
override 64_BIT_BUILDS :=
endif
ifeq ($(strip $(64_BIT_BUILDS)),FALSE)
override 64_BIT_BUILDS :=
endif
ifeq ($(strip $(64_BIT_BUILDS)),false)
override 64_BIT_BUILDS :=
endif

ifneq ($(strip $(64_BIT_BUILDS)),)

  #	Only a MAKE_64_OS uses special 64-bit builds.
  ifneq ($(filter $(OS),$(MAKE_64_OS)),)

    ifdef 64
      ifndef 32_BIT_DEFAULT
        PROGRAMS = $(APPLICATIONS)
      endif

    #	To avoid infinite recursion, don't define if 64 was defined.
    else
      #	Determines if a recursive 64-bit MAKE should be done.
      64_BIT_MAKE = 64_bit_make
      ifndef 32_BIT_DEFAULT
        ifneq ($(strip $(PROGRAMS)),)
          PROGRAMS = $(APPLICATIONS:%=%$(32_BIT_FILES))
        endif
      endif
    endif

  else
    ifdef 64
    $(error The host system is not a $(MAKE_64_OS) OS but 64 was set.)
    endif
  endif
endif

#-------------------------------------------------------------------------------
#	Compiler/Linker settings.

#	Preprocessor flags:
 
#	DEBUG controls -
#
#	Each source file may define its own DEBUG symbols
#	to selectively control which DEBUG code sections are to be compiled.
#	By default, all DEBUG sections will be included.
DEBUG							?=	(DEBUG_ALL)

#	>>> WARNING <<<
#	On MS/Windows the MSVC compiler uses the INCLUDE environment variable
#	for a special purpose, so INCLUDES is used in Makefiles instead. On
#	other platforms INCLUDE is still added to the CPPFLAGS for backwards
#	compatibility with the conventional usage in Makefiles that are not
#	MS/Windows aware.
ifeq ($(OS),WIN)
CPPFLAGS						+=	-I. $(INCLUDES)
else
CPPFLAGS						+=	-I. $(INCLUDE)
endif
debug:	CPPFLAGS				+=	-DDEBUG='$(DEBUG)'

#	Compiler flags:
ifeq ($(OS),Darwin)
DEFAULT_OPTIMIZATION			=	-O
DEBUG_OPTIMIZATION				=	-g
CXXFLAGS						+=	-Wall $(FAT_MAC)
CFLAGS							+=	-Wall $(FAT_MAC)
else ifeq ($(OS),WIN)
DEFAULT_OPTIMIZATION			=	/O2
DEBUG_OPTIMIZATION				=	/Od
CXXFLAGS						+=	/EHsc /MD
CFLAGS							+=	/EHsc /MD
else
DEFAULT_OPTIMIZATION			=	-O
DEBUG_OPTIMIZATION				=	-g
CXXFLAGS						+=	-Wall
CFLAGS							+=	-Wall
endif

		OPTIMIZATION			?=	$(DEFAULT_OPTIMIZATION)
debug:	OPTIMIZATION			=	$(DEBUG_OPTIMIZATION)

ifeq ($(PLATFORM),sparc)
CXXFLAGS__64					=	-mcpu=v9 -m64
CFLAGS__64						=	-mcpu=v9 -m64
endif
					CXXFLAGS	+=	$(OPTIMIZATION) $(CXXFLAGS_$(64))
					CFLAGS		+=	$(OPTIMIZATION) $(CFLAGS_$(64))

ifneq ($(OS),WIN)
$(SHARED_LIBRARY):	CFLAGS		+=	-fPIC
$(SHARED_LIBRARY):	CXXFLAGS	+=	-fPIC
endif

#	Linker flags:

ifeq ($(OS),Darwin)
LDFLAGS							+=	$(FAT_MAC)
$(SHARED_LIBRARY):	LDFLAGS		+=	-dynamiclib \
									-flat_namespace \
									-single_module \
									-headerpad_max_install_names \
									-current_version $(SUBSYSTEM_VERSION)
else ifneq ($(OS),WIN)
$(SHARED_LIBRARY):	LDFLAGS		+=	-shared
endif

ifeq ($(PLATFORM),sparc)
LDFLAGS__64						=	-mcpu=v9 -m64
endif
					LDFLAGS		+=	$(LDFLAGS_$(64))

#		The subsystem library, if specified.
ifdef LIBRARY
SUBSYSTEM_LIBRARY				+=	-L. -l$(LIBRARY)$(64)
endif

#===============================================================================
#	Standard targets:

all:				.BEGIN \
					.all \
					.END

#	This target should be given appropriate dependencies by the user.
.all:
#	Recursive 64-bit make is always done when possible.
    ifdef 64_BIT_MAKE
	@echo
	@echo  "+++ 64-bit
	@$(MAKE) --no-print-directory 64=$(64_BIT_FILES) .all
    endif

ifdef 64_BIT_MAKE
#	64-bit build.
64_bit:
	@$(MAKE) --no-print-directory 64=$(64_BIT_FILES)
else
64_bit:
	@echo "64-bit builds are not used on this $(OS) system."
endif

#	DEBUG
debug:				.applications
    ifdef 64_BIT_MAKE
	@echo
	@echo  "+++ 64-bit
	@$(MAKE) --no-print-directory 64=$(64_BIT_FILES) debug
    endif

#-------------------------------------------------------------------------------
#	Application programs:

applications:		.BEGIN \
					.applications \
					.END

.applications:		.libraries \
					.BEGIN_PROGRAMS \
					$(PROGRAMS)
ifdef LIBRARY
$(PROGRAMS):		$(STATIC_LIBRARY) \
					$(SHARED_LIBRARY)
endif
$(PROGRAMS):		$(PROGRAM_OBJECTS) \
					$(PROGRAM_OBJECTS_ADDITIONS)
$(PROGRAMS):		%: %.$(OBJECT_EXTENSION)$(64)
    ifeq ($(OS),WIN)
	$(CC) /Fe$@ $(LDFLAGS) $< \
		$(PROGRAM_OBJECTS) $($@_OBJECTS) \
		$(SUBSYSTEM_LIBRARY) $(LIBRARIES)
    else
	$(CC) -o $@ $(LDFLAGS) $< \
		$(PROGRAM_OBJECTS) $($@_OBJECTS) \
		$(SUBSYSTEM_LIBRARY) $(LIBRARIES)
    endif

#-------------------------------------------------------------------------------
#	Libraries:

libraries:			.BEGIN \
					.libraries \
					.END
.libraries:			.static_library \
					.shared_library

#	Static library.
lib:				static_library
library:			static_library
static_lib:			static_library
static_library:		.BEGIN \
					.static_library \
					.END
ifdef LIBRARY
.library:			.static_library
.static_library:	.BEGIN_STATIC \
					$(STATIC_LIBRARY)
ifeq ($(OS),WIN)
$(STATIC_LIBRARY):	$(LIBRARY_OBJECTS)
	lib.exe $(LIBRARY_OBJECTS) /OUT:$(STATIC_LIBRARY)
else
#	
#	Not using the built-library module rule
#	because ar is not compatibile with Darwin fat Mac builds
$(STATIC_LIBRARY):	$(LIBRARY_OBJECTS)
	rm -f $@
	ar qs $@ $^
endif
else
.static_library:
endif

#	Shared/dynamic library.
shared_lib:			shared_library
shared_library:		.shared_library
ifdef LIBRARY

ifeq ($(OS),WIN)
.shared_library:
$(SHARED_LIBRARY):	$(LIBRARY_OBJECTS)
	$(CC) /LD $(CXXFLAGS) $(LIBRARY_OBJECTS) $(LIBRARIES) /Fe$(SHARED_LIBRARY)
else
.shared_library:	.BEGIN_SHARED \
					$(SHARED_LIBRARY)
$(SHARED_LIBRARY):	$(SHARED_LIBRARY_OBJECTS)
	$(CC) $(LDFLAGS) -o $@ $(SHARED_LIBRARY_OBJECTS) $(LIBRARIES)
endif

else
.shared_library:
endif

#-------------------------------------------------------------------------------
#	Java packages:

java:				.BEGIN \
					.java \
					.END
.java:				.BEGIN_JAVA \
					$(JAVA_CLASSES)

#	Rule to compile Java .class files from .java files.
%.class: %.java
	$(JAVAC) -classpath $(JPATH) $(JFLAGS) $<

#-------------------------------------------------------------------------------
#	Installation:

#	REQUIRED TARGET
install:			.BEGIN \
					.BEGIN_INSTALL \
					standard_dirs \
					.install \
					.docs_install \
					.END
#	There is no default install procedure; choose from the targets below.
.install:


#	Host-dependent binary installations:

#	REQUIRED TARGET
bin_install:		.BEGIN \
					standard_dirs \
					.bin_install \
					.END
#	There is no default .bin_install procedure; choose from the targets below.
.bin_install:
    ifdef 64_BIT_MAKE
	@echo
	@echo  "+++ 64-bit
	@$(MAKE) --no-print-directory 64=$(64_BIT_FILES) .bin_install
    endif

#	Installation of 64-bit binaries.
ifdef 64_BIT_MAKE
64_bit_install:
	@$(MAKE) --no-print-directory 64=$(64_BIT_FILES) bin_install
else
64_bit_install:
	@echo "64-bit builds are not used on this $(OS) system."
endif

#...............................................................................
#	Installation of the application programs.
applications_install:	.BEGIN \
						.applications_install \
						.END
.applications_install:	.applications
    ifneq ($(strip $(PROGRAMS)),)
	@echo
	@echo "--- Applications installation"
	$(MKDIR) -p $(INSTALL_DIR)/bin
	-$(CHMOD) $(DIR_PERMISSIONS) $(INSTALL_DIR)/bin
	$(INSTALL) -m $(BIN_PERMISSIONS) $(PROGRAMS) \
		$(INSTALL_DIR)/bin
    endif

#...............................................................................
#	Installation of libraries.
libraries_install:	.BEGIN \
					.libraries_install \
					.END
.libraries_install:	.library_install \
					.shared_library_install

#	Installation of the static (.a) library.
library_install:	.BEGIN \
					.library_install \
					.shared_library_install \
					.END
.library_install:	.library
    ifneq ($(strip $(STATIC_LIBRARY)),)
	@echo
	@echo "--- Static library installation"
	$(MKDIR) -p $(INSTALL_DIR)/lib
	-$(CHMOD) $(DIR_PERMISSIONS) $(INSTALL_DIR)/lib
	$(INSTALL) -m $(SOURCE_FILE_PERMISSIONS) $(STATIC_LIBRARY) \
		$(INSTALL_DIR)/lib
	$(RANLIB) $(INSTALL_DIR)/lib/$(STATIC_LIBRARY)
    endif

#	Installation of the shared/dynamic ($(SHARED_LIBRARY_EXT)) library.
shared_library_install:		.shared_library_install
.shared_library_install:	.shared_library
    ifneq ($(strip $(SHARED_LIBRARY)),)
	@echo
	@echo "--- Shared library installation"
	$(INSTALL) -m $(SOURCE_FILE_PERMISSIONS) $(SHARED_LIBRARY) \
		$(INSTALL_DIR)/lib/$(SHARED_LIBRARY)-$(SUBSYSTEM_VERSION)
	-$(RM) -f $(INSTALL_DIR)/lib/$(SHARED_LIBRARY)
	$(LN) $(SHARED_LIBRARY)-$(SUBSYSTEM_VERSION) \
		$(INSTALL_DIR)/lib/$(SHARED_LIBRARY)
    endif

#...............................................................................
#	Installation of shared text files:

#	Installation of script files.
scripts_install:	.BEGIN \
					.scripts_install \
					.END
.scripts_install:
    ifneq ($(strip $(SCRIPTS)),)
	@echo
	@echo "--- $(TITLE) executable scripts installation"
	$(MKDIR) -p $(INSTALL_DIR)/bin
	-$(CHMOD) $(DIR_PERMISSIONS) $(INSTALL_DIR)/bin
	$(INSTALL) -m $(BIN_PERMISSIONS) $(SCRIPTS) \
		$(INSTALL_DIR)/bin
    endif

#	Installation of the header (include) files.
headers_install:	.BEGIN \
					.headers_install \
					.END
.headers_install:
    ifneq ($(strip $(HEADERS)),)
	@echo
	@echo "--- $(TITLE) library headers installation"
	$(MKDIR) -p $(INSTALL_DIR)/include
	-$(CHMOD) $(DIR_PERMISSIONS) $(INSTALL_DIR)/include
	$(INSTALL) -m $(SOURCE_FILE_PERMISSIONS) $(HEADERS) \
		$(INSTALL_DIR)/include
    endif

#	Installation of configuration files.
ifneq ($(strip $(CONFIGS)),)
configs_install:	.BEGIN \
					.configs_install \
					.END
.configs_install:
    ifdef SUBSYSTEM
	@echo
	@echo "--- $(TITLE) configuration files installation"
	$(MKDIR) -p $(INSTALL_DIR)/$(SUBSYSTEM_CONFIG_DIR)
	-$(CHMOD) $(CONFIG_DIR_PERMISSIONS) $(INSTALL_DIR)/$(SUBSYSTEM_CONFIG_DIR)
	$(INSTALL) -m $(CONFIG_FILE_PERMISSIONS) $(CONFIGS) \
		$(INSTALL_DIR)/$(SUBSYSTEM_CONFIG_DIR)
    else
	$(error To install CONFIGS files SUBSYSTEM must be defined.)
    endif
else
configs_install:
endif

#...............................................................................
#	Installation of documentation files.
#	REQUIRED TARGET
docs_install:		.BEGIN \
					.docs_install \
					.END
.docs_install:		.docs
	@echo
	@echo "--- $(TITLE) documentation installation"
	$(MKDIR) -p $(DOCS_INSTALL_DIR)/$(DOCS_DIR)
	-$(CHMOD) $(DOCS_DIR_PERMISSIONS) $(DOCS_INSTALL_DIR)/$(DOCS_DIR)
	-$(CP) -R -p $(DOCS_DIR)/* $(DOCS_INSTALL_DIR)/$(DOCS_DIR)

#-------------------------------------------------------------------------------
#	Documentation:

#	REQUIRED TARGET
docs:				.BEGIN \
					.BEGIN_DOCS \
					.docs \
					.END
.docs:			

#...............................................................................
#	Doxygen generation of HTML.
doxygen:			.BEGIN \
					.BEGIN_DOCS \
					.doxygen \
					.END
ifdef SUBSYSTEM
.doxygen:	$(DOCS_HTML_DIR)/index.html
$(DOCS_HTML_DIR)/index.html:	\
					$(HEADERS) \
					$(PROGRAM_SOURCES) \
					$(LIBRARY_SOURCES) \
					Doxyfile \
					Header.doxygen \
					Overview.doxygen
	@echo
	@echo "--- Building documentation using doxygen"
	$(MKDIR) -p $(DOCS_HTML_DIR)
	doxygen Doxyfile
	$(CP) $(PROJECT_ROOT)/Build/HiRISE_Icon.png $(DOCS_HTML_DIR)
else
.doxygen:
	$(error To create Doxygen documentation files SUBSYSTEM must be defined.)
endif

#	Template file for basic configuration.
Doxyfile:
	@echo
	@echo "--- Creating Doxyfile"
	$(SED) \
		-e s/SUBSYSTEM/$(SUBSYSTEM)/g \
		-e s/VERSION/$(SUBSYSTEM_VERSION)/g \
		$(PROJECT_ROOT)/Build/$@.template > $@

#	Template file for HiRISE style sheet.
Header.doxygen:
	@echo
	@echo "--- Creating Header.doxygen"
	$(SED) \
		-e s/SUBSYSTEM/$(SUBSYSTEM)/g \
		$(PROJECT_ROOT)/Build/$@.template > $@

#	Template file for basic HiRISE software description.
Overview.doxygen:
	@echo
	@echo "--- Creating Overview.doxygen"
	$(CP) $(PROJECT_ROOT)/Build/$@ $@

#...............................................................................
#	PERL POD generation of HTML and man pages.
pod:			.BEGIN \
				.BEGIN_DOCS \
				.pod \
				.END
POD_SCRIPTS		?=	$(SCRIPTS)
SCRIPTS_HTML	=	$(POD_SCRIPTS:%=$(DOCS_HTML_DIR)/%.html)
.pod:				$(SCRIPTS_HTML)
$(SCRIPTS_HTML):	$(DOCS_HTML_DIR)/%.html: %
    ifdef SUBSYSTEM
	$(MKDIR) -p $(DOCS_MAN_DIR)/man1
	@echo
	@echo "--- Building documentation using PERL POD"
	-pod2man \
		$< $(DOCS_MAN_DIR)/man1/$<.1 \
		--center="HiRISE at HiROC" \
		--release=$(SUBSYSTEM_VERSION) \
		--section=1
	$(MKDIR) -p $(DOCS_HTML_DIR)
	-pod2html \
		--infile=$< \
		--outfile=$@ \
		--title=$<
	-$(RM) *.tmp *.x~~
    else
	$(error To create POD documentation files SUBSYSTEM must be defined.)
    endif

#-------------------------------------------------------------------------------
#	Cleaning.

#	REQUIRED TARGET
clean:				.BEGIN \
					.clean \
					.END
.clean:
	-$(RM) \
		$(PROGRAMS) $(MAIN_OBJECTS) $(PROGRAM_OBJECTS) $(PROGRAM_OBJECTS_ADDITIONS) \
		$(STATIC_LIBRARY) $(LIBRARY_OBJECTS) \
		$(SHARED_LIBRARY) $(SHARED_LIBRARY_OBJECTS) \
		*.core *.obj *.o *.class *.d *.tmp *.x~~
    ifdef 64_BIT_MAKE
	@$(MAKE) --no-print-directory 64=$(64_BIT_FILES) .clean
    endif

#	WARNING: Removes the documentation.
docs_clean:
	-$(RM) -r $(DOCS_DIR)

#	REQUIRED TARGET
dist_clean:			.BEGIN \
					.dist_clean \
					.END
.dist_clean:		.clean \
					scrub
#	Removes local links to standard directories.
scrub:				docs_clean
	-$(RM) $(CONFIG_DIR) $(DATA_DIR) $(LOGS_DIR)
distclean:			dist_clean

#-------------------------------------------------------------------------------
#	Standard directories and links to them.

ifdef SUBSYSTEM
standard_dirs:	$(SUBSYSTEM_CONFIG_DIR) \
				$(SUBSYSTEM_DATA_DIR) \
				$(SUBSYSTEM_LOGS_DIR)
$(SUBSYSTEM_CONFIG_DIR):
    ifndef NO_CONFIGS
	@echo
	@echo "--- Configuration directory: $(INSTALL_DIR)/$(SUBSYSTEM_CONFIG_DIR)"
	$(MKDIR) -p $(INSTALL_DIR)/$(SUBSYSTEM_CONFIG_DIR)
	-$(CHMOD) $(CONFIG_DIR_PERMISSIONS) $(INSTALL_DIR)/$(SUBSYSTEM_CONFIG_DIR)
	-$(LN) $(INSTALL_DIR)/$(SUBSYSTEM_CONFIG_DIR) $(CONFIG_DIR)
    endif
$(SUBSYSTEM_DATA_DIR):
    ifndef NO_DATA_DIR
	@echo
	@echo "--- Data directory: $(INSTALL_DIR)/$(SUBSYSTEM_DATA_DIR)"
	$(MKDIR) -p $(INSTALL_DIR)/$(SUBSYSTEM_DATA_DIR)
	-$(CHMOD) $(DATA_DIR_PERMISSIONS) $(INSTALL_DIR)/$(SUBSYSTEM_DATA_DIR)
	-$(LN) $(INSTALL_DIR)/$(SUBSYSTEM_DATA_DIR) $(DATA_DIR)
    endif
$(SUBSYSTEM_LOGS_DIR):
    ifndef NO_LOGS_DIR
	@echo
	@echo "--- Logs directory: $(INSTALL_DIR)/$(SUBSYSTEM_LOGS_DIR)"
	$(MKDIR) -p $(INSTALL_DIR)/$(SUBSYSTEM_LOGS_DIR)
	-$(CHMOD) $(LOGS_DIR_PERMISSIONS) $(INSTALL_DIR)/$(SUBSYSTEM_LOGS_DIR)
	-$(LN) $(INSTALL_DIR)/$(SUBSYSTEM_LOGS_DIR) $(LOGS_DIR)
    endif
else
standard_dirs:
endif

#-------------------------------------------------------------------------------
#	Report targets:

.VERSION:
	if test ! -f VERSION -a -f ../VERSION ; then \
	$(LN) ../VERSION VERSION ;\
	fi

VERSION_Report:
	@echo "   $(SUBSYSTEM) v$(SUBSYSTEM_VERSION)"

.BEGIN:
	@echo
	@echo "*** $(PROJECT) $(TITLE) version $(SUBSYSTEM_VERSION)"
	@echo "$(OS) $(subst $(space),.,$(KERNEL_RELEASE)) $(PLATFORM)"
	@echo "GNU make $(MAKE_VERSION)"
	@echo "    Makefile $(MAKEFILE_REVISION)"
	@echo "    Build/Makefile.conf $(CONF_MAKEFILE_REVISION)"
	@date

.BEGIN_STATIC:
	@echo
	@echo "=== $(TITLE) static object library: $(STATIC_LIBRARY)"
	@echo

.BEGIN_SHARED:
	@echo
	@echo "=== $(TITLE) shared/dynamic library: $(SHARED_LIBRARY)"
	@echo

.BEGIN_PROGRAMS:
	@echo
	@echo "=== $(TITLE) application programs"
	@echo

.BEGIN_JAVA:
	@echo
	@echo "=== $(TITLE) Java packages"
	@echo

.BEGIN_DOCS:
	@echo
	@echo "=== $(TITLE) documentation"
	@echo

.BEGIN_INSTALL:
	@echo
	@echo "=== $(TITLE) installation"
	@echo

.END:
	@echo
	@echo "*** $(PROJECT) $(TITLE) version $(SUBSYSTEM_VERSION) Completed"
	@date
	@echo


.PHONY:	.VERSION .BEGIN \
		all .all debug \
		64_bit \
		.BEGIN_STATIC \
		static_library static_lib library lib .library \
		.BEGIN_SHARED \
		shared_library shared_lib .shared_library \
		.BEGIN_PROGRAMS \
		applications .applications \
		.BEGIN_JAVA \
		java .java \
		.BEGIN_INSTALL \
		install .install \
		bin_install .bin_install \
		library_install .library_install \
		shared_library_install .shared_library_install \
		applications_install .applications_install \
		headers_install .headers_install \
		scripts_install .scripts_install \
		configs_install .configs_install \
		standard_dirs \
		64_bit_install \
		docs_install .docs_install \
		.BEGIN_DOCS \
		docs .docs \
		dist .dist \
		clean .clean dist_clean distclean .dist_clean \
		.END 

.PRECIOUS:	$(STATIC_LIBRARY)

#-------------------------------------------------------------------------------
#	Pattern rule to instruct cpp to create dependency files (.d) from
#	source files (.c .cc .cpp).
#
#	Use gcc to generate dependencies even on Windows:
DEPENDENCY_CXX	= $(CXX)
DEPENDENCY_CC	= $(CC)
ifeq ($(OS),WIN)
DEPENDENCY_CXX	= g++
DEPENDENCY_CC	= gcc
endif
#
#	NOTE: Use -M (instead of -MM) to include system headers.
#
#	The first invocation of sed replaces Windows-style absolute paths
#	with Cygwin-style absolute paths so that make doesn't interpret the
#	':' in the Windows absolute path as the target delimiter.
%.d:	%.cc
		@echo "Rebuilding $@ dependency file."
		@set -e; $(DEPENDENCY_CXX) -MM $(CPPFLAGS) $< \
			| sed 's/\([a-zA-Z]\):\//\/cygdrive\/\1\//g' \
			| sed 's/\($*\)\.o[ ]*\\:/\1.$(OBJECT_EXTENSION) $@ : /g' > $@; \
			[ -s $@ ] || rm -f $@
%.d:	%.cpp
		@echo "Rebuilding $@ dependency file."
		@set -e; $(DEPENDENCY_CXX) -MM $(CPPFLAGS) $< \
			| sed 's/\([a-zA-Z]\):\//\/cygdrive\/\1\//g' \
			| sed 's/\($*\)\.o[ ]*\\:/\1.$(OBJECT_EXTENSION) $@ : /g' > $@; \
			[ -s $@ ] || rm -f $@
%.d:	%.c
		@echo "Rebuilding $@ dependency file."
		@set -e; $(DEPENDENCY_CC) -MM $(CPPFLAGS) $< \
			| sed 's/\([a-zA-Z]\):\//\/cygdrive\/\1\//g' \
			| sed 's/\($*\)\.o[ ]*\\:/\1.$(OBJECT_EXTENSION) $@ : /g' > $@; \
			[ -s $@ ] || rm -f $@

#	The dependency files are included based on the list of
#	source files: $(SOURCES)
SOURCE_DEPENDENCIES := $(SOURCES:.c=.d)
SOURCE_DEPENDENCIES += $(SOURCES:.cc=.d)
SOURCE_DEPENDENCIES += $(SOURCES:.cpp=.d)

SOURCE_DEPENDENCIES := $(filter %.d, $(SOURCE_DEPENDENCIES))

ifneq ($(strip $(SOURCE_DEPENDENCIES)),)
ifneq ($(strip $(MAKECMDGOALS)),clean)
ifneq ($(strip $(MAKECMDGOALS)),.clean)
ifneq ($(strip $(MAKECMDGOALS)),dist_clean)
-include $(SOURCE_DEPENDENCIES)
endif
endif
endif
endif

#-------------------------------------------------------------------------------
#	64-bit object pattern rule. 
ifeq ($(OS),WIN)
%.obj: %.cc
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $< -Fo$@
%.obj: %.c
	$(CC) $(CPPFLAGS) $(CFLAGS) -c $< -Fo$@
else
%.o$(64_BIT_FILES): %.cc
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $< -o $@
%.o$(64_BIT_FILES): %.c
	$(CC) $(CPPFLAGS) $(CFLAGS) -c $< -o $@

#	32-bit object pattern rule for compatibility in 64-bit build context.
%.o$(32_BIT_FILES): %.cc
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $< -o $@
%.o$(32_BIT_FILES): %.c
	$(CC) $(CPPFLAGS) $(CFLAGS) -c $< -o $@
endif

#	Shared library object pattern rule.
%.$(SHARED_LIBRARY_OBJECTS_EXT): %.cc
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $< -o $@
%.$(SHARED_LIBRARY_OBJECTS_EXT)$(64_BIT_FILES): %.cc
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $< -o $@
%.$(SHARED_LIBRARY_OBJECTS_EXT)$(32_BIT_FILES): %.cc
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $< -o $@
%.$(SHARED_LIBRARY_OBJECTS_EXT): %.c
	$(CC) $(CPPFLAGS) $(CFLAGS) -c $< -o $@
%.$(SHARED_LIBRARY_OBJECTS_EXT)$(64_BIT_FILES): %.c
	$(CC) $(CPPFLAGS) $(CFLAGS) -c $< -o $@
%.$(SHARED_LIBRARY_OBJECTS_EXT)$(32_BIT_FILES): %.c
	$(CC) $(CPPFLAGS) $(CFLAGS) -c $< -o $@


endif	#	not MASTER_MAKEFILE
